import { useEffect, useState } from "react";
import { Alert, Box, Button, Chip, Snackbar, Typography } from "@mui/material";
import Head from "next/head";

import Enter from "components/base/Enter";
import FlatRenting from "components/base/FlatRenting";
import NftCreation from "components/base/NftCreation";
import { INFTExtended } from "interfaces/INFT";
import { getNftMetadata } from "lib/ternoa";
import { middleEllipsis } from "lib/strings";
import { useAppDispatch, useAppSelector } from "redux/hooks";
import { actions as walletActions } from "redux/wallet/actions";

import styles from "../styles/Home.module.css";
import { TernoaIPFS } from "ternoa-js";
import {
  IPFS_API_KEY,
  IPFS_URL,
  RENTAL_NFT_OFFCHAIN_DATA,
} from "lib/constants";
import ContractCreation from "components/base/ContractCreation";
import { subscribeCurrentBlockNumber } from "lib/crypto";

export default function Home() {
  const [currentBlock, setCurrentBlock] = useState(0);
  const [error, setError] = useState("");
  const [isAvailableForRent, setIsAvailableForRent] = useState(false);
  const [nft, setNft] = useState<INFTExtended | undefined>(undefined);

  const dispatch = useAppDispatch();
  const user = useAppSelector(({ wallet }) => wallet.user);
  const isOwner = nft?.owner === user.address;
  const isRentee = nft?.rentalContract?.rentee === user.address;
  const isContract = nft?.rentalContract !== null;

  const handleConnectModal = () => {
    dispatch(walletActions.openCloseModal());
  };

  const handleCloseAlert = () => setError("");

  useEffect(() => {
    const subToBlockNumber = async () => {
      await subscribeCurrentBlockNumber(setCurrentBlock);
    };

    subToBlockNumber();
  }, []);

  useEffect(() => {
    const loadNftMetadata = async (offchainData: string) => {
      const ipfsClient = new TernoaIPFS(new URL(IPFS_URL), IPFS_API_KEY);
      try {
        const nftMetadata = await getNftMetadata(offchainData, ipfsClient);
        setNft((prevState) => prevState && { ...prevState, ...nftMetadata });
      } catch (error) {
        console.log(error);
      }
    };

    const offchainData = RENTAL_NFT_OFFCHAIN_DATA ?? nft?.offchainData;
    if (offchainData) {
      loadNftMetadata(offchainData);
    }
  }, [nft?.offchainData]);

  useEffect(() => {
    const contractEndingBlock = nft?.rentalContract?.endBlock;
    if (contractEndingBlock && currentBlock > contractEndingBlock)
      setNft(
        (prevState) => prevState && { ...prevState, rentalContract: null }
      );
  }, [currentBlock, nft?.rentalContract?.endBlock]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Ternoa: Tech AMA</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Rent a flat</h1>
        {user.isConnected ? (
          <Button onClick={handleConnectModal}>
            <Typography>{`Connected with: ${middleEllipsis(
              user.address
            )}`}</Typography>
          </Button>
        ) : (
          <Button onClick={handleConnectModal}>
            <Typography>Connect wallet</Typography>
          </Button>
        )}

        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            gap: "16px",
            mt: "16px",
          }}
        >
          {nft && <Typography>{`ðŸ”‘ key ID: ${nft.nftId}`}</Typography>}
          {isOwner && <Chip label="Owner" color="primary" />}
          {isRentee && <Chip label="Rentee" color="secondary" />}
        </Box>

        {user.isConnected && nft === undefined && (
          <NftCreation setError={setError} setNft={setNft} />
        )}

        {user.isConnected &&
          nft &&
          !isOwner &&
          (isRentee || isAvailableForRent) && (
            <FlatRenting
              currentBlock={currentBlock}
              isAvailableForRent={isAvailableForRent}
              nft={nft}
              setError={setError}
              setIsAvailableForRent={setIsAvailableForRent}
              setNft={setNft}
            />
          )}

        {nft && (
          <Box
            sx={{
              mt: "80px",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              gap: "16px",
            }}
          >
            <Enter nft={nft} />
            {isOwner && !isContract && (
              <ContractCreation
                nftId={nft.nftId}
                setError={setError}
                setNft={setNft}
                setIsAvailableForRent={setIsAvailableForRent}
              />
            )}
          </Box>
        )}

        <Snackbar
          open={error !== ""}
          autoHideDuration={6000}
          onClose={handleCloseAlert}
        >
          <Alert
            onClose={handleCloseAlert}
            severity="error"
            sx={{ width: "100%" }}
          >
            {error}
          </Alert>
        </Snackbar>
      </main>
    </div>
  );
}
